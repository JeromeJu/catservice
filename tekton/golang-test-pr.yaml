apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: golang-test-pr
  namespace: getting-started
spec:
  inputs:
    params:
    - name: report-to-github
      description: whether or not to report failure on the PR status
    - name: package
      description: package (and its children) under test
    - name: packages
      description: "packages to test (default: ./...)"
      default: "./..."
    - name: version
      description: golang version to use for tests
      default: "1.12"
    - name: flags
      description: flags to use for the test command
      default: -race -cover -v
    - name: GOOS
      description: "running program's operating system target"
      default: linux
    - name: GOARCH
      description: "running program's architecture target"
      default: amd64
    - name: GO111MODULE
      description: "value of module support"
      default: auto
    resources:
    - name: pr
      type: pullRequest
    - name: source
      type: git
      targetPath: src/$(inputs.params.package)
  outputs:
    resources:
    - name: pr
      type: pullRequest
  steps:
  - name: unit-test
    image: golang:$(inputs.params.version)
    workingdir: /workspace/src/$(inputs.params.package)
    command:
    - /bin/bash
    args:
    - -ce
    - |
      set -ex
      cp -r /workspace/pr/ /workspace/output/

      set +e
      out=$(go test $(inputs.params.flags) $(inputs.params.packages))
      exit_code=$?
      set -e

      if [[ $(inputs.params.report-to-github) -eq "yes" ]]; then
        if [[ $exit_code -ne 0 ]]; then
          cat <<EOF > /workspace/output/pr/status/tekton.json
          {
            "ID": "tekton",
            "Code": "failure",
            "Description": "Tests failed"
          }
      EOF
        fi
      fi
    env:
    - name: GOPATH
      value: /workspace
    - name: GOOS
      value: "$(inputs.params.GOOS)"
    - name: GOARCH
      value: "$(inputs.params.GOARCH)"
    - name: GO111MODULE
      value: "$(inputs.params.GO111MODULE)"
